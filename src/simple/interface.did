type CanisterStatusResponse = record {
  status : CanisterStatusType;
  memory_size : nat;
  cycles : nat;
  settings : DefiniteCanisterSettings;
  idle_cycles_burned_per_day : nat;
  module_hash : opt vec nat8;
};
type CanisterStatusType = variant { stopped; stopping; running };
type DefiniteCanisterSettings = record {
  freezing_threshold : nat;
  controllers : vec principal;
  memory_allocation : nat;
  compute_allocation : nat;
};
type Result = variant { Ok; Err : text };
type Snapshot = record { value : nat64; timestamp : nat64 };
service : {
  add_data : (nat64, nat64) -> ();
  add_datum : (nat64) -> (Result);
  get_data_length : () -> (nat64) query;
  get_datum : (nat64) -> (Snapshot) query;
  get_last_datum : () -> (opt Snapshot) query;
  get_top_data : (nat64) -> (vec Snapshot) query;
  status_all : () -> (CanisterStatusResponse) query;
  status_used_heap_size : () -> (nat64) query;
  status_used_stable_memory : () -> (nat64) query;
}